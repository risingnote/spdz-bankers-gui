import extractClientId from './clientIdFromBuffer'

describe('Extract the client public key from an integer array sent by SPDZ', () => {
  it('successfully extracts the client public key from 2 engine results', () => {
    const byteBufferList = [Uint8Array.from([0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0,
                                             0x5, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0]),
                            Uint8Array.from([0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0,
                                             0x5, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0])]

    expect(extractClientId(byteBufferList)).toEqual('0000000100000002000000030000000400000005000000060000000700000008')
  })

  it('throws an error if the wrong length is passed in', () => {
    const testThrowsWrongType = () => extractClientId([Uint8Array.from([0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0])])

    expect(testThrowsWrongType).toThrowError('Spdz proxy 0 provided client id with 16 bytes, expected 32.')
  })

  it('throws an error if the SDPZ result is not consistant', () => {
    const byteBufferList = [Uint8Array.from([0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0,
                                             0x5, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0]),
                            Uint8Array.from([0xaa, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0,
                                             0x5, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0])]
    
    const testThrowsNotConsistant = () => extractClientId(byteBufferList)

    expect(testThrowsNotConsistant).toThrowError('Not all parties agree on the answer!!')
  })
})
